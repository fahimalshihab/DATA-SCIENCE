# -*- coding: utf-8 -*-
"""notebook9d0029022e

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/notebook9d0029022e-c00fd11d-6aa7-43ec-b168-28caf8a0490e.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240404/auto/storage/goog4_request%26X-Goog-Date%3D20240404T204650Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dd56f4e777e510d7a734f7dc016de7f24ad38042442d2098e85c44060cf2eb3e6219ebf14eee9feb6276aec8323abb24859ca296f0b80026e1f0af678697aa64b3a2b17379153aacfa8de06fd6cdd345c4a950bb1f7ca9646c9f1c2d238c5d9ffbc2600c39d7ac047f362af7e7bbb26ccba4d4e018717d2fca56494240f8240d4b819a2e26165f756ab0a9dd85dac77260d918a1f70cc6cef60d207a6a5b0973890d942ad2b6181602f6fae1d7f252683e36796479d8b05aee22f82efed5b7ac616656d2a72693c02f042f0509273e6c80c1f37bad78f625e70e20a8f27694085ba096fdad52252f0c43140b901e322d7d48c44c779e2b8302688868a0ec01963
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/kaggle/input/heart-disease/heart_disease_data.csv')

# print first 5 rows of the dataset
heart_data.head()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

# 1 --> Defective Heart

# 0 --> Healthy Heart

# Splitting the Features and Target
X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

# Splitting the Data into Training data & Test Data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape, Y_train.shape,Y_test.shape)

# Model Training

# Logistic Regression
model = LogisticRegression()
# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy on Test data : ', test_data_accuracy)

heart_data.head()

prediction = model.predict(X_test)

output = pd.DataFrame({"Age": X_test.age,"Prediction": prediction , "Target": Y_test})

output.to_csv('submission.csv', index=False)
print("Your submission was successfully saved!")

""" input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease') """

